/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardsManagerV1StorageInterface extends ethers.utils.Interface {
  functions: {
    "accRewardsPerSignal()": FunctionFragment;
    "accRewardsPerSignalLastBlockUpdated()": FunctionFragment;
    "addressCache(bytes32)": FunctionFragment;
    "controller()": FunctionFragment;
    "denylist(bytes32)": FunctionFragment;
    "issuanceRate()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "subgraphAvailabilityOracle()": FunctionFragment;
    "subgraphs(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accRewardsPerSignal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accRewardsPerSignalLastBlockUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressCache",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "denylist", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "issuanceRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "subgraphAvailabilityOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subgraphs",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accRewardsPerSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accRewardsPerSignalLastBlockUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "denylist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subgraphAvailabilityOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subgraphs", data: BytesLike): Result;

  events: {
    "ParameterUpdated(string)": EventFragment;
    "SetController(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
}

export class RewardsManagerV1Storage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardsManagerV1StorageInterface;

  functions: {
    accRewardsPerSignal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accRewardsPerSignal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    accRewardsPerSignalLastBlockUpdated(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accRewardsPerSignalLastBlockUpdated()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    controller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "controller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    denylist(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "denylist(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    issuanceRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "issuanceRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subgraphAvailabilityOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "subgraphAvailabilityOracle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    subgraphs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      accRewardsForSubgraph: BigNumber;
      accRewardsForSubgraphSnapshot: BigNumber;
      accRewardsPerSignalSnapshot: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "subgraphs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      accRewardsForSubgraph: BigNumber;
      accRewardsForSubgraphSnapshot: BigNumber;
      accRewardsPerSignalSnapshot: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;
  };

  accRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

  "accRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

  accRewardsPerSignalLastBlockUpdated(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accRewardsPerSignalLastBlockUpdated()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addressCache(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  denylist(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "denylist(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

  "issuanceRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  setController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subgraphAvailabilityOracle(overrides?: CallOverrides): Promise<string>;

  "subgraphAvailabilityOracle()"(overrides?: CallOverrides): Promise<string>;

  subgraphs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    accRewardsForSubgraph: BigNumber;
    accRewardsForSubgraphSnapshot: BigNumber;
    accRewardsPerSignalSnapshot: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "subgraphs(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    accRewardsForSubgraph: BigNumber;
    accRewardsForSubgraphSnapshot: BigNumber;
    accRewardsPerSignalSnapshot: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  callStatic: {
    accRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

    "accRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardsPerSignalLastBlockUpdated(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accRewardsPerSignalLastBlockUpdated()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    denylist(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "denylist(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    "issuanceRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    subgraphAvailabilityOracle(overrides?: CallOverrides): Promise<string>;

    "subgraphAvailabilityOracle()"(overrides?: CallOverrides): Promise<string>;

    subgraphs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      accRewardsForSubgraph: BigNumber;
      accRewardsForSubgraphSnapshot: BigNumber;
      accRewardsPerSignalSnapshot: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "subgraphs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      accRewardsForSubgraph: BigNumber;
      accRewardsForSubgraphSnapshot: BigNumber;
      accRewardsPerSignalSnapshot: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;
  };

  filters: {
    ParameterUpdated(param: null): EventFilter;

    SetController(controller: null): EventFilter;
  };

  estimateGas: {
    accRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

    "accRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardsPerSignalLastBlockUpdated(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accRewardsPerSignalLastBlockUpdated()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    denylist(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "denylist(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    "issuanceRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subgraphAvailabilityOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "subgraphAvailabilityOracle()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subgraphs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "subgraphs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accRewardsPerSignal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accRewardsPerSignal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accRewardsPerSignalLastBlockUpdated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accRewardsPerSignalLastBlockUpdated()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    denylist(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "denylist(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuanceRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "issuanceRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subgraphAvailabilityOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subgraphAvailabilityOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subgraphs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subgraphs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
