/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStakingInterface extends ethers.utils.Interface {
  functions: {
    "allocate(bytes32,uint256,address,bytes32,bytes)": FunctionFragment;
    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)": FunctionFragment;
    "claim(address,bool)": FunctionFragment;
    "claimMany(address[],bool)": FunctionFragment;
    "closeAllocation(address,bytes32)": FunctionFragment;
    "closeAllocationMany(tuple[])": FunctionFragment;
    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)": FunctionFragment;
    "collect(uint256,address)": FunctionFragment;
    "delegate(address,uint256)": FunctionFragment;
    "getAllocation(address)": FunctionFragment;
    "getAllocationState(address)": FunctionFragment;
    "getDelegation(address,address)": FunctionFragment;
    "getIndexerCapacity(address)": FunctionFragment;
    "getIndexerStakedTokens(address)": FunctionFragment;
    "getSubgraphAllocatedTokens(bytes32)": FunctionFragment;
    "hasStake(address)": FunctionFragment;
    "isAllocation(address)": FunctionFragment;
    "isDelegator(address,address)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "setAssetHolder(address,bool)": FunctionFragment;
    "setChannelDisputeEpochs(uint32)": FunctionFragment;
    "setCurationPercentage(uint32)": FunctionFragment;
    "setDelegationParameters(uint32,uint32,uint32)": FunctionFragment;
    "setDelegationParametersCooldown(uint32)": FunctionFragment;
    "setDelegationRatio(uint32)": FunctionFragment;
    "setDelegationTaxPercentage(uint32)": FunctionFragment;
    "setDelegationUnbondingPeriod(uint32)": FunctionFragment;
    "setMaxAllocationEpochs(uint32)": FunctionFragment;
    "setMinimumIndexerStake(uint256)": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "setProtocolPercentage(uint32)": FunctionFragment;
    "setRebateRatio(uint32,uint32)": FunctionFragment;
    "setSlasher(address,bool)": FunctionFragment;
    "setThawingPeriod(uint32)": FunctionFragment;
    "slash(address,uint256,uint256,address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeTo(address,uint256)": FunctionFragment;
    "undelegate(address,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawDelegated(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFrom",
    values: [string, BytesLike, BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMany",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAllocation",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAllocationMany",
    values: [{ allocationID: string; poi: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAndAllocate",
    values: [
      string,
      BytesLike,
      string,
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegation",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexerCapacity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexerStakedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubgraphAllocatedTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetHolder",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelDisputeEpochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurationPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationParametersCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationTaxPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationUnbondingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAllocationEpochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumIndexerStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebateRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlasher",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setThawingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDelegated",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAllocationMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAndAllocate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexerCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexerStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubgraphAllocatedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChannelDisputeEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationParametersCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationTaxPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationUnbondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAllocationEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumIndexerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebateRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSlasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThawingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelegated",
    data: BytesLike
  ): Result;

  events: {};
}

export class IStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStakingInterface;

  functions: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeAndAllocate(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        indexer: string;
        subgraphDeploymentID: string;
        tokens: BigNumber;
        createdAtEpoch: BigNumber;
        closedAtEpoch: BigNumber;
        collectedFees: BigNumber;
        effectiveAllocation: BigNumber;
        accRewardsPerAllocatedToken: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      };
    }>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        indexer: string;
        subgraphDeploymentID: string;
        tokens: BigNumber;
        createdAtEpoch: BigNumber;
        closedAtEpoch: BigNumber;
        collectedFees: BigNumber;
        effectiveAllocation: BigNumber;
        accRewardsPerAllocatedToken: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      };
    }>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        shares: BigNumber;
        tokensLocked: BigNumber;
        tokensLockedUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        shares: BigNumber;
        tokensLocked: BigNumber;
        tokensLockedUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    hasStake(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawDelegated(
      _indexer: string,
      _newIndexer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _newIndexer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allocate(
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allocate(bytes32,uint256,address,bytes32,bytes)"(
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocateFrom(
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(
    _allocationID: string,
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address,bool)"(
    _allocationID: string,
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimMany(
    _allocationID: string[],
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimMany(address[],bool)"(
    _allocationID: string[],
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeAllocation(
    _allocationID: string,
    _poi: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeAllocation(address,bytes32)"(
    _allocationID: string,
    _poi: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeAllocationMany(
    _requests: { allocationID: string; poi: BytesLike }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeAllocationMany(tuple[])"(
    _requests: { allocationID: string; poi: BytesLike }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeAndAllocate(
    _oldAllocationID: string,
    _poi: BytesLike,
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
    _oldAllocationID: string,
    _poi: BytesLike,
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collect(
    _tokens: BigNumberish,
    _allocationID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collect(uint256,address)"(
    _tokens: BigNumberish,
    _allocationID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegate(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address,uint256)"(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllocation(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    subgraphDeploymentID: string;
    tokens: BigNumber;
    createdAtEpoch: BigNumber;
    closedAtEpoch: BigNumber;
    collectedFees: BigNumber;
    effectiveAllocation: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getAllocation(address)"(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    subgraphDeploymentID: string;
    tokens: BigNumber;
    createdAtEpoch: BigNumber;
    closedAtEpoch: BigNumber;
    collectedFees: BigNumber;
    effectiveAllocation: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getAllocationState(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "getAllocationState(address)"(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getDelegation(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<{
    shares: BigNumber;
    tokensLocked: BigNumber;
    tokensLockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getDelegation(address,address)"(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<{
    shares: BigNumber;
    tokensLocked: BigNumber;
    tokensLockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getIndexerCapacity(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIndexerCapacity(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIndexerStakedTokens(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIndexerStakedTokens(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubgraphAllocatedTokens(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSubgraphAllocatedTokens(bytes32)"(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasStake(_indexer: string, overrides?: CallOverrides): Promise<boolean>;

  "hasStake(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllocation(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllocation(address)"(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDelegator(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDelegator(address,address)"(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperator(
    _operator: string,
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperator(address,address)"(
    _operator: string,
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAssetHolder(
    _assetHolder: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAssetHolder(address,bool)"(
    _assetHolder: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setChannelDisputeEpochs(
    _channelDisputeEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setChannelDisputeEpochs(uint32)"(
    _channelDisputeEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCurationPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurationPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationParameters(
    _indexingRewardCut: BigNumberish,
    _queryFeeCut: BigNumberish,
    _cooldownBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationParameters(uint32,uint32,uint32)"(
    _indexingRewardCut: BigNumberish,
    _queryFeeCut: BigNumberish,
    _cooldownBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationParametersCooldown(
    _blocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationParametersCooldown(uint32)"(
    _blocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationRatio(
    _delegationRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationRatio(uint32)"(
    _delegationRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationTaxPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationTaxPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationUnbondingPeriod(
    _delegationUnbondingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationUnbondingPeriod(uint32)"(
    _delegationUnbondingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxAllocationEpochs(
    _maxAllocationEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxAllocationEpochs(uint32)"(
    _maxAllocationEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumIndexerStake(
    _minimumIndexerStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumIndexerStake(uint256)"(
    _minimumIndexerStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperator(address,bool)"(
    _operator: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProtocolPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProtocolPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRebateRatio(
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRebateRatio(uint32,uint32)"(
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSlasher(
    _slasher: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSlasher(address,bool)"(
    _slasher: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setThawingPeriod(
    _thawingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setThawingPeriod(uint32)"(
    _thawingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slash(
    _indexer: string,
    _tokens: BigNumberish,
    _reward: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "slash(address,uint256,uint256,address)"(
    _indexer: string,
    _tokens: BigNumberish,
    _reward: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeTo(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeTo(address,uint256)"(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  undelegate(
    _indexer: string,
    _shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "undelegate(address,uint256)"(
    _indexer: string,
    _shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstake(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstake(uint256)"(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawDelegated(
    _indexer: string,
    _newIndexer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawDelegated(address,address)"(
    _indexer: string,
    _newIndexer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeAndAllocate(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStake(_indexer: string, overrides?: CallOverrides): Promise<boolean>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_tokens: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(_tokens: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    withdrawDelegated(
      _indexer: string,
      _newIndexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _newIndexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeAndAllocate(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStake(_indexer: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(_tokens: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstake(_tokens: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawDelegated(
      _indexer: string,
      _newIndexer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _newIndexer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeAndAllocate(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _oldAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasStake(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawDelegated(
      _indexer: string,
      _newIndexer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _newIndexer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
