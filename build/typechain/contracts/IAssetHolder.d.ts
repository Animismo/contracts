/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAssetHolderInterface extends ethers.utils.Interface {
  functions: {
    "claimAll(bytes32,bytes,bytes)": FunctionFragment;
    "transferAll(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimAll",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAll",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAll",
    data: BytesLike
  ): Result;

  events: {
    "AssetTransferred(bytes32,bytes32,uint256)": EventFragment;
    "Deposited(bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
}

export class IAssetHolder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAssetHolderInterface;

  functions: {
    claimAll(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAll(bytes32,bytes,bytes)"(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferAll(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAll(bytes32,bytes)"(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claimAll(
    guarantorChannelId: BytesLike,
    guaranteeBytes: BytesLike,
    allocationBytes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAll(bytes32,bytes,bytes)"(
    guarantorChannelId: BytesLike,
    guaranteeBytes: BytesLike,
    allocationBytes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferAll(
    channelId: BytesLike,
    allocationBytes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAll(bytes32,bytes)"(
    channelId: BytesLike,
    allocationBytes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claimAll(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAll(bytes32,bytes,bytes)"(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAll(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferAll(bytes32,bytes)"(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AssetTransferred(
      channelId: BytesLike | null,
      destination: BytesLike | null,
      amount: null
    ): EventFilter;

    Deposited(
      destination: BytesLike | null,
      amountDeposited: null,
      destinationHoldings: null
    ): EventFilter;
  };

  estimateGas: {
    claimAll(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimAll(bytes32,bytes,bytes)"(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferAll(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAll(bytes32,bytes)"(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimAll(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAll(bytes32,bytes,bytes)"(
      guarantorChannelId: BytesLike,
      guaranteeBytes: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferAll(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAll(bytes32,bytes)"(
      channelId: BytesLike,
      allocationBytes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
