/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RebatePoolMockInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,uint256)": FunctionFragment;
    "alphaDenominator()": FunctionFragment;
    "alphaNumerator()": FunctionFragment;
    "cobbDouglas(uint256,uint256,uint256,uint256,uint256,uint32,uint32)": FunctionFragment;
    "pop(uint256,uint256)": FunctionFragment;
    "rebatePool()": FunctionFragment;
    "setRebateRatio(uint32,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "alphaDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alphaNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cobbDouglas",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pop",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebatePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRebateRatio",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alphaDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alphaNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cobbDouglas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRebateRatio",
    data: BytesLike
  ): Result;

  events: {
    "Redeemed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
}

export class RebatePoolMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RebatePoolMockInterface;

  functions: {
    add(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    alphaDenominator(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "alphaDenominator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    alphaNumerator(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "alphaNumerator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    cobbDouglas(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "cobbDouglas(uint256,uint256,uint256,uint256,uint256,uint32,uint32)"(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pop(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pop(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rebatePool(
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    "rebatePool()"(
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    _indexerFees: BigNumberish,
    _indexerAllocatedStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(uint256,uint256)"(
    _indexerFees: BigNumberish,
    _indexerAllocatedStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  alphaDenominator(overrides?: CallOverrides): Promise<number>;

  "alphaDenominator()"(overrides?: CallOverrides): Promise<number>;

  alphaNumerator(overrides?: CallOverrides): Promise<number>;

  "alphaNumerator()"(overrides?: CallOverrides): Promise<number>;

  cobbDouglas(
    _totalRewards: BigNumberish,
    _fees: BigNumberish,
    _totalFees: BigNumberish,
    _stake: BigNumberish,
    _totalStake: BigNumberish,
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "cobbDouglas(uint256,uint256,uint256,uint256,uint256,uint32,uint32)"(
    _totalRewards: BigNumberish,
    _fees: BigNumberish,
    _totalFees: BigNumberish,
    _stake: BigNumberish,
    _totalStake: BigNumberish,
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pop(
    _indexerFees: BigNumberish,
    _indexerAllocatedStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pop(uint256,uint256)"(
    _indexerFees: BigNumberish,
    _indexerAllocatedStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rebatePool(
    overrides?: CallOverrides
  ): Promise<{
    fees: BigNumber;
    effectiveAllocatedStake: BigNumber;
    claimedRewards: BigNumber;
    unclaimedAllocationsCount: number;
    alphaNumerator: number;
    alphaDenominator: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
  }>;

  "rebatePool()"(
    overrides?: CallOverrides
  ): Promise<{
    fees: BigNumber;
    effectiveAllocatedStake: BigNumber;
    claimedRewards: BigNumber;
    unclaimedAllocationsCount: number;
    alphaNumerator: number;
    alphaDenominator: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
  }>;

  setRebateRatio(
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRebateRatio(uint32,uint32)"(
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    alphaDenominator(overrides?: CallOverrides): Promise<number>;

    "alphaDenominator()"(overrides?: CallOverrides): Promise<number>;

    alphaNumerator(overrides?: CallOverrides): Promise<number>;

    "alphaNumerator()"(overrides?: CallOverrides): Promise<number>;

    cobbDouglas(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cobbDouglas(uint256,uint256,uint256,uint256,uint256,uint32,uint32)"(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pop(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pop(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebatePool(
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    "rebatePool()"(
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Redeemed(value: null): EventFilter;
  };

  estimateGas: {
    add(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    alphaDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "alphaDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    alphaNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "alphaNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    cobbDouglas(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cobbDouglas(uint256,uint256,uint256,uint256,uint256,uint32,uint32)"(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pop(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pop(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rebatePool(overrides?: CallOverrides): Promise<BigNumber>;

    "rebatePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    alphaDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alphaDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alphaNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alphaNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cobbDouglas(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cobbDouglas(uint256,uint256,uint256,uint256,uint256,uint32,uint32)"(
      _totalRewards: BigNumberish,
      _fees: BigNumberish,
      _totalFees: BigNumberish,
      _stake: BigNumberish,
      _totalStake: BigNumberish,
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pop(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pop(uint256,uint256)"(
      _indexerFees: BigNumberish,
      _indexerAllocatedStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rebatePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rebatePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
