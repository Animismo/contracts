/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EpochManagerV1StorageInterface extends ethers.utils.Interface {
  functions: {
    "addressCache(bytes32)": FunctionFragment;
    "controller()": FunctionFragment;
    "epochLength()": FunctionFragment;
    "lastLengthUpdateBlock()": FunctionFragment;
    "lastLengthUpdateEpoch()": FunctionFragment;
    "lastRunEpoch()": FunctionFragment;
    "setController(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressCache",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastLengthUpdateBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastLengthUpdateEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRunEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLengthUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLengthUpdateEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRunEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;

  events: {
    "ParameterUpdated(string)": EventFragment;
    "SetController(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
}

export class EpochManagerV1Storage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EpochManagerV1StorageInterface;

  functions: {
    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    controller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "controller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    epochLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "epochLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastLengthUpdateBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastLengthUpdateBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastLengthUpdateEpoch(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastLengthUpdateEpoch()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastRunEpoch(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastRunEpoch()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addressCache(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  epochLength(overrides?: CallOverrides): Promise<BigNumber>;

  "epochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastLengthUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastLengthUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastLengthUpdateEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "lastLengthUpdateEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastRunEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRunEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  setController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "epochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastLengthUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastLengthUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastLengthUpdateEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "lastLengthUpdateEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRunEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRunEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ParameterUpdated(param: null): EventFilter;

    SetController(controller: null): EventFilter;
  };

  estimateGas: {
    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "epochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastLengthUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastLengthUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastLengthUpdateEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "lastLengthUpdateEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRunEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRunEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastLengthUpdateBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastLengthUpdateBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastLengthUpdateEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastLengthUpdateEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRunEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRunEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
