/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IServiceRegistryInterface extends ethers.utils.Interface {
  functions: {
    "isRegistered(address)": FunctionFragment;
    "register(string,string)": FunctionFragment;
    "registerFor(address,string,string)": FunctionFragment;
    "unregister()": FunctionFragment;
    "unregisterFor(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFor",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterFor",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterFor",
    data: BytesLike
  ): Result;

  events: {};
}

export class IServiceRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IServiceRegistryInterface;

  functions: {
    isRegistered(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isRegistered(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    register(
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(string,string)"(
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerFor(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerFor(address,string,string)"(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unregister(overrides?: Overrides): Promise<ContractTransaction>;

    "unregister()"(overrides?: Overrides): Promise<ContractTransaction>;

    unregisterFor(
      _indexer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unregisterFor(address)"(
      _indexer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  isRegistered(_indexer: string, overrides?: CallOverrides): Promise<boolean>;

  "isRegistered(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  register(
    _url: string,
    _geohash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(string,string)"(
    _url: string,
    _geohash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerFor(
    _indexer: string,
    _url: string,
    _geohash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerFor(address,string,string)"(
    _indexer: string,
    _url: string,
    _geohash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unregister(overrides?: Overrides): Promise<ContractTransaction>;

  "unregister()"(overrides?: Overrides): Promise<ContractTransaction>;

  unregisterFor(
    _indexer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unregisterFor(address)"(
    _indexer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    isRegistered(_indexer: string, overrides?: CallOverrides): Promise<boolean>;

    "isRegistered(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    register(
      _url: string,
      _geohash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(string,string)"(
      _url: string,
      _geohash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerFor(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerFor(address,string,string)"(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregister(overrides?: CallOverrides): Promise<void>;

    "unregister()"(overrides?: CallOverrides): Promise<void>;

    unregisterFor(_indexer: string, overrides?: CallOverrides): Promise<void>;

    "unregisterFor(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    isRegistered(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegistered(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(string,string)"(
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerFor(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerFor(address,string,string)"(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unregister(overrides?: Overrides): Promise<BigNumber>;

    "unregister()"(overrides?: Overrides): Promise<BigNumber>;

    unregisterFor(_indexer: string, overrides?: Overrides): Promise<BigNumber>;

    "unregisterFor(address)"(
      _indexer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isRegistered(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegistered(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(string,string)"(
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerFor(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerFor(address,string,string)"(
      _indexer: string,
      _url: string,
      _geohash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unregister(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unregister()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unregisterFor(
      _indexer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unregisterFor(address)"(
      _indexer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
