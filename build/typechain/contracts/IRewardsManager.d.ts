/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRewardsManagerInterface extends ethers.utils.Interface {
  functions: {
    "getAccRewardsForSubgraph(bytes32)": FunctionFragment;
    "getAccRewardsPerAllocatedToken(bytes32)": FunctionFragment;
    "getAccRewardsPerSignal()": FunctionFragment;
    "getNewRewardsPerSignal()": FunctionFragment;
    "getRewards(address)": FunctionFragment;
    "isDenied(bytes32)": FunctionFragment;
    "onSubgraphAllocationUpdate(bytes32)": FunctionFragment;
    "onSubgraphSignalUpdate(bytes32)": FunctionFragment;
    "setDenied(bytes32,bool)": FunctionFragment;
    "setDeniedMany(bytes32[],bool[])": FunctionFragment;
    "setIssuanceRate(uint256)": FunctionFragment;
    "setSubgraphAvailabilityOracle(address)": FunctionFragment;
    "takeRewards(address)": FunctionFragment;
    "updateAccRewardsPerSignal()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccRewardsForSubgraph",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccRewardsPerAllocatedToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccRewardsPerSignal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewRewardsPerSignal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRewards", values: [string]): string;
  encodeFunctionData(functionFragment: "isDenied", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "onSubgraphAllocationUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onSubgraphSignalUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDenied",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeniedMany",
    values: [BytesLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuanceRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubgraphAvailabilityOracle",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "takeRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateAccRewardsPerSignal",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccRewardsForSubgraph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccRewardsPerAllocatedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccRewardsPerSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewRewardsPerSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDenied", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onSubgraphAllocationUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSubgraphSignalUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDenied", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDeniedMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIssuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubgraphAvailabilityOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccRewardsPerSignal",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRewardsManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRewardsManagerInterface;

  functions: {
    getAccRewardsForSubgraph(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAccRewardsForSubgraph(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAccRewardsPerAllocatedToken(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getAccRewardsPerAllocatedToken(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getAccRewardsPerSignal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAccRewardsPerSignal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getNewRewardsPerSignal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNewRewardsPerSignal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRewards(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRewards(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isDenied(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isDenied(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    onSubgraphAllocationUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onSubgraphAllocationUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onSubgraphSignalUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onSubgraphSignalUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDenied(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDenied(bytes32,bool)"(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDeniedMany(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDeniedMany(bytes32[],bool[])"(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIssuanceRate(
      _issuanceRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIssuanceRate(uint256)"(
      _issuanceRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSubgraphAvailabilityOracle(
      _subgraphAvailabilityOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSubgraphAvailabilityOracle(address)"(
      _subgraphAvailabilityOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    takeRewards(
      _allocationID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "takeRewards(address)"(
      _allocationID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAccRewardsPerSignal(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAccRewardsPerSignal()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAccRewardsForSubgraph(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAccRewardsForSubgraph(bytes32)"(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccRewardsPerAllocatedToken(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getAccRewardsPerAllocatedToken(bytes32)"(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getAccRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

  "getAccRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNewRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

  "getNewRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRewards(address)"(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isDenied(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDenied(bytes32)"(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onSubgraphAllocationUpdate(
    _subgraphDeploymentID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onSubgraphAllocationUpdate(bytes32)"(
    _subgraphDeploymentID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onSubgraphSignalUpdate(
    _subgraphDeploymentID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onSubgraphSignalUpdate(bytes32)"(
    _subgraphDeploymentID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDenied(
    _subgraphDeploymentID: BytesLike,
    _deny: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDenied(bytes32,bool)"(
    _subgraphDeploymentID: BytesLike,
    _deny: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDeniedMany(
    _subgraphDeploymentID: BytesLike[],
    _deny: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDeniedMany(bytes32[],bool[])"(
    _subgraphDeploymentID: BytesLike[],
    _deny: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIssuanceRate(
    _issuanceRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIssuanceRate(uint256)"(
    _issuanceRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSubgraphAvailabilityOracle(
    _subgraphAvailabilityOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSubgraphAvailabilityOracle(address)"(
    _subgraphAvailabilityOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  takeRewards(
    _allocationID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "takeRewards(address)"(
    _allocationID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAccRewardsPerSignal(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAccRewardsPerSignal()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccRewardsForSubgraph(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccRewardsForSubgraph(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccRewardsPerAllocatedToken(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getAccRewardsPerAllocatedToken(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getAccRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNewRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

    "getNewRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewards(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDenied(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDenied(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onSubgraphAllocationUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onSubgraphAllocationUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSubgraphSignalUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onSubgraphSignalUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDenied(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDenied(bytes32,bool)"(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeniedMany(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setDeniedMany(bytes32[],bool[])"(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuanceRate(
      _issuanceRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIssuanceRate(uint256)"(
      _issuanceRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubgraphAvailabilityOracle(
      _subgraphAvailabilityOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSubgraphAvailabilityOracle(address)"(
      _subgraphAvailabilityOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    takeRewards(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "takeRewards(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAccRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

    "updateAccRewardsPerSignal()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAccRewardsForSubgraph(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccRewardsForSubgraph(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccRewardsPerAllocatedToken(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccRewardsPerAllocatedToken(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNewRewardsPerSignal(overrides?: CallOverrides): Promise<BigNumber>;

    "getNewRewardsPerSignal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewards(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDenied(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDenied(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSubgraphAllocationUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onSubgraphAllocationUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onSubgraphSignalUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onSubgraphSignalUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDenied(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDenied(bytes32,bool)"(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDeniedMany(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDeniedMany(bytes32[],bool[])"(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setIssuanceRate(
      _issuanceRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIssuanceRate(uint256)"(
      _issuanceRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSubgraphAvailabilityOracle(
      _subgraphAvailabilityOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSubgraphAvailabilityOracle(address)"(
      _subgraphAvailabilityOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    takeRewards(
      _allocationID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "takeRewards(address)"(
      _allocationID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAccRewardsPerSignal(overrides?: Overrides): Promise<BigNumber>;

    "updateAccRewardsPerSignal()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccRewardsForSubgraph(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccRewardsForSubgraph(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccRewardsPerAllocatedToken(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccRewardsPerAllocatedToken(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccRewardsPerSignal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccRewardsPerSignal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewRewardsPerSignal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewRewardsPerSignal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewards(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDenied(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDenied(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onSubgraphAllocationUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onSubgraphAllocationUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onSubgraphSignalUpdate(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onSubgraphSignalUpdate(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDenied(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDenied(bytes32,bool)"(
      _subgraphDeploymentID: BytesLike,
      _deny: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDeniedMany(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDeniedMany(bytes32[],bool[])"(
      _subgraphDeploymentID: BytesLike[],
      _deny: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIssuanceRate(
      _issuanceRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIssuanceRate(uint256)"(
      _issuanceRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSubgraphAvailabilityOracle(
      _subgraphAvailabilityOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSubgraphAvailabilityOracle(address)"(
      _subgraphAvailabilityOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    takeRewards(
      _allocationID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "takeRewards(address)"(
      _allocationID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAccRewardsPerSignal(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAccRewardsPerSignal()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
