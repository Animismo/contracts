/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GraphProxyInterface extends ethers.utils.Interface {
  functions: {
    "acceptUpgrade()": FunctionFragment;
    "acceptUpgradeAndCall(bytes)": FunctionFragment;
    "admin()": FunctionFragment;
    "implementation()": FunctionFragment;
    "pendingImplementation()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUpgradeAndCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUpgradeAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;

  events: {
    "AdminUpdated(address,address)": EventFragment;
    "ImplementationUpdated(address,address)": EventFragment;
    "PendingImplementationUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImplementationUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingImplementationUpdated"
  ): EventFragment;
}

export class GraphProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GraphProxyInterface;

  functions: {
    acceptUpgrade(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptUpgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

    acceptUpgradeAndCall(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptUpgradeAndCall(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: Overrides): Promise<ContractTransaction>;

    "admin()"(overrides?: Overrides): Promise<ContractTransaction>;

    implementation(overrides?: Overrides): Promise<ContractTransaction>;

    "implementation()"(overrides?: Overrides): Promise<ContractTransaction>;

    pendingImplementation(overrides?: Overrides): Promise<ContractTransaction>;

    "pendingImplementation()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      _newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      _newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      _newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptUpgrade(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptUpgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

  acceptUpgradeAndCall(
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptUpgradeAndCall(bytes)"(
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: Overrides): Promise<ContractTransaction>;

  "admin()"(overrides?: Overrides): Promise<ContractTransaction>;

  implementation(overrides?: Overrides): Promise<ContractTransaction>;

  "implementation()"(overrides?: Overrides): Promise<ContractTransaction>;

  pendingImplementation(overrides?: Overrides): Promise<ContractTransaction>;

  "pendingImplementation()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAdmin(
    _newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    _newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    _newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    _newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptUpgrade(overrides?: CallOverrides): Promise<void>;

    "acceptUpgrade()"(overrides?: CallOverrides): Promise<void>;

    acceptUpgradeAndCall(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptUpgradeAndCall(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    "implementation()"(overrides?: CallOverrides): Promise<string>;

    pendingImplementation(overrides?: CallOverrides): Promise<string>;

    "pendingImplementation()"(overrides?: CallOverrides): Promise<string>;

    setAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "setAdmin(address)"(
      _newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      _newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      _newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminUpdated(oldAdmin: string | null, newAdmin: string | null): EventFilter;

    ImplementationUpdated(
      oldImplementation: string | null,
      newImplementation: string | null
    ): EventFilter;

    PendingImplementationUpdated(
      oldPendingImplementation: string | null,
      newPendingImplementation: string | null
    ): EventFilter;
  };

  estimateGas: {
    acceptUpgrade(overrides?: Overrides): Promise<BigNumber>;

    "acceptUpgrade()"(overrides?: Overrides): Promise<BigNumber>;

    acceptUpgradeAndCall(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptUpgradeAndCall(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: Overrides): Promise<BigNumber>;

    "admin()"(overrides?: Overrides): Promise<BigNumber>;

    implementation(overrides?: Overrides): Promise<BigNumber>;

    "implementation()"(overrides?: Overrides): Promise<BigNumber>;

    pendingImplementation(overrides?: Overrides): Promise<BigNumber>;

    "pendingImplementation()"(overrides?: Overrides): Promise<BigNumber>;

    setAdmin(_newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "setAdmin(address)"(
      _newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeTo(
      _newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      _newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptUpgrade(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptUpgrade()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    acceptUpgradeAndCall(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptUpgradeAndCall(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    implementation(overrides?: Overrides): Promise<PopulatedTransaction>;

    "implementation()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pendingImplementation(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pendingImplementation()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      _newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      _newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      _newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
