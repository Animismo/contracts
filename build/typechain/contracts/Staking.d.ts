/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "acceptProxy(address)": FunctionFragment;
    "acceptProxyAndCall(address,bytes)": FunctionFragment;
    "addressCache(bytes32)": FunctionFragment;
    "allocate(bytes32,uint256,address,bytes32,bytes)": FunctionFragment;
    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)": FunctionFragment;
    "allocations(address)": FunctionFragment;
    "alphaDenominator()": FunctionFragment;
    "alphaNumerator()": FunctionFragment;
    "assetHolders(address)": FunctionFragment;
    "channelDisputeEpochs()": FunctionFragment;
    "claim(address,bool)": FunctionFragment;
    "claimMany(address[],bool)": FunctionFragment;
    "closeAllocation(address,bytes32)": FunctionFragment;
    "closeAllocationMany(tuple[])": FunctionFragment;
    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)": FunctionFragment;
    "collect(uint256,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "curationPercentage()": FunctionFragment;
    "delegate(address,uint256)": FunctionFragment;
    "delegationParametersCooldown()": FunctionFragment;
    "delegationPools(address)": FunctionFragment;
    "delegationRatio()": FunctionFragment;
    "delegationTaxPercentage()": FunctionFragment;
    "delegationUnbondingPeriod()": FunctionFragment;
    "getAllocation(address)": FunctionFragment;
    "getAllocationState(address)": FunctionFragment;
    "getDelegation(address,address)": FunctionFragment;
    "getIndexerCapacity(address)": FunctionFragment;
    "getIndexerStakedTokens(address)": FunctionFragment;
    "getSubgraphAllocatedTokens(bytes32)": FunctionFragment;
    "getWithdraweableDelegatedTokens(tuple)": FunctionFragment;
    "hasStake(address)": FunctionFragment;
    "initialize(address,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
    "isAllocation(address)": FunctionFragment;
    "isDelegator(address,address)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "maxAllocationEpochs()": FunctionFragment;
    "minimumIndexerStake()": FunctionFragment;
    "operatorAuth(address,address)": FunctionFragment;
    "protocolPercentage()": FunctionFragment;
    "rebates(uint256)": FunctionFragment;
    "setAssetHolder(address,bool)": FunctionFragment;
    "setChannelDisputeEpochs(uint32)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setCurationPercentage(uint32)": FunctionFragment;
    "setDelegationParameters(uint32,uint32,uint32)": FunctionFragment;
    "setDelegationParametersCooldown(uint32)": FunctionFragment;
    "setDelegationRatio(uint32)": FunctionFragment;
    "setDelegationTaxPercentage(uint32)": FunctionFragment;
    "setDelegationUnbondingPeriod(uint32)": FunctionFragment;
    "setMaxAllocationEpochs(uint32)": FunctionFragment;
    "setMinimumIndexerStake(uint256)": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "setProtocolPercentage(uint32)": FunctionFragment;
    "setRebateRatio(uint32,uint32)": FunctionFragment;
    "setSlasher(address,bool)": FunctionFragment;
    "setThawingPeriod(uint32)": FunctionFragment;
    "slash(address,uint256,uint256,address)": FunctionFragment;
    "slashers(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeTo(address,uint256)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "subgraphAllocations(bytes32)": FunctionFragment;
    "thawingPeriod()": FunctionFragment;
    "undelegate(address,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawDelegated(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptProxy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "acceptProxyAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressCache",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateFrom",
    values: [string, BytesLike, BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "allocations", values: [string]): string;
  encodeFunctionData(
    functionFragment: "alphaDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alphaNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetHolders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "channelDisputeEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMany",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAllocation",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAllocationMany",
    values: [{ allocationID: string; poi: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAndAllocate",
    values: [
      string,
      BytesLike,
      string,
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationParametersCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationPools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationTaxPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationUnbondingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegation",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexerCapacity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexerStakedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubgraphAllocatedTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdraweableDelegatedTokens",
    values: [
      {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "hasStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAllocationEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumIndexerStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAuth",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetHolder",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelDisputeEpochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurationPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationParametersCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationTaxPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationUnbondingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAllocationEpochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumIndexerStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebateRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlasher",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setThawingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "slashers", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subgraphAllocations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "thawingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDelegated",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProxyAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alphaDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alphaNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelDisputeEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAllocationMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAndAllocate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationParametersCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationTaxPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationUnbondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexerCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexerStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubgraphAllocatedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdraweableDelegatedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAllocationEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumIndexerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChannelDisputeEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationParametersCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationTaxPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationUnbondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAllocationEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumIndexerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebateRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSlasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThawingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slashers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subgraphAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thawingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelegated",
    data: BytesLike
  ): Result;

  events: {
    "AllocationClosed(address,bytes32,uint256,uint256,address,uint256,address,bytes32,bool)": EventFragment;
    "AllocationCollected(address,bytes32,uint256,uint256,address,address,uint256,uint256)": EventFragment;
    "AllocationCreated(address,bytes32,uint256,uint256,address,bytes32)": EventFragment;
    "AssetHolderUpdate(address,address,bool)": EventFragment;
    "DelegationParametersUpdated(address,uint32,uint32,uint32)": EventFragment;
    "ParameterUpdated(string)": EventFragment;
    "RebateClaimed(address,bytes32,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SetController(address)": EventFragment;
    "SetOperator(address,address,bool)": EventFragment;
    "SlasherUpdate(address,address,bool)": EventFragment;
    "StakeDelegated(address,address,uint256,uint256)": EventFragment;
    "StakeDelegatedLocked(address,address,uint256,uint256,uint256)": EventFragment;
    "StakeDelegatedWithdrawn(address,address,uint256)": EventFragment;
    "StakeDeposited(address,uint256)": EventFragment;
    "StakeLocked(address,uint256,uint256)": EventFragment;
    "StakeSlashed(address,uint256,uint256,address)": EventFragment;
    "StakeWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocationClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetHolderUpdate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegationParametersUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebateClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlasherUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeDelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeDelegatedLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeDelegatedWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
}

export class Staking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingInterface;

  functions: {
    acceptProxy(
      _proxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptProxy(address)"(
      _proxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    acceptProxyAndCall(
      _proxy: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptProxyAndCall(address,bytes)"(
      _proxy: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    alphaDenominator(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "alphaDenominator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    alphaNumerator(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "alphaNumerator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    assetHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "assetHolders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    channelDisputeEpochs(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "channelDisputeEpochs()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeAndAllocate(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    controller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "controller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    curationPercentage(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "curationPercentage()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegationParametersCooldown(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "delegationParametersCooldown()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    delegationPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      cooldownBlocks: number;
      indexingRewardCut: number;
      queryFeeCut: number;
      updatedAtBlock: BigNumber;
      tokens: BigNumber;
      shares: BigNumber;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "delegationPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      cooldownBlocks: number;
      indexingRewardCut: number;
      queryFeeCut: number;
      updatedAtBlock: BigNumber;
      tokens: BigNumber;
      shares: BigNumber;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    delegationRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "delegationRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    delegationTaxPercentage(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "delegationTaxPercentage()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    delegationUnbondingPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "delegationUnbondingPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        indexer: string;
        subgraphDeploymentID: string;
        tokens: BigNumber;
        createdAtEpoch: BigNumber;
        closedAtEpoch: BigNumber;
        collectedFees: BigNumber;
        effectiveAllocation: BigNumber;
        accRewardsPerAllocatedToken: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      };
    }>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        indexer: string;
        subgraphDeploymentID: string;
        tokens: BigNumber;
        createdAtEpoch: BigNumber;
        closedAtEpoch: BigNumber;
        collectedFees: BigNumber;
        effectiveAllocation: BigNumber;
        accRewardsPerAllocatedToken: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
      };
    }>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        shares: BigNumber;
        tokensLocked: BigNumber;
        tokensLockedUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        shares: BigNumber;
        tokensLocked: BigNumber;
        tokensLockedUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getWithdraweableDelegatedTokens(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getWithdraweableDelegatedTokens(tuple)"(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    hasStake(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32)"(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    maxAllocationEpochs(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "maxAllocationEpochs()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    minimumIndexerStake(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minimumIndexerStake()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    operatorAuth(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "operatorAuth(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    protocolPercentage(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "protocolPercentage()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    rebates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    "rebates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slashers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "slashers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    stake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokensStaked: BigNumber;
      tokensAllocated: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokensStaked: BigNumber;
      tokensAllocated: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    subgraphAllocations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "subgraphAllocations(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    thawingPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "thawingPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawDelegated(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptProxy(
    _proxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptProxy(address)"(
    _proxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  acceptProxyAndCall(
    _proxy: string,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptProxyAndCall(address,bytes)"(
    _proxy: string,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addressCache(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  allocate(
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allocate(bytes32,uint256,address,bytes32,bytes)"(
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocateFrom(
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocations(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    subgraphDeploymentID: string;
    tokens: BigNumber;
    createdAtEpoch: BigNumber;
    closedAtEpoch: BigNumber;
    collectedFees: BigNumber;
    effectiveAllocation: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "allocations(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    subgraphDeploymentID: string;
    tokens: BigNumber;
    createdAtEpoch: BigNumber;
    closedAtEpoch: BigNumber;
    collectedFees: BigNumber;
    effectiveAllocation: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  alphaDenominator(overrides?: CallOverrides): Promise<number>;

  "alphaDenominator()"(overrides?: CallOverrides): Promise<number>;

  alphaNumerator(overrides?: CallOverrides): Promise<number>;

  "alphaNumerator()"(overrides?: CallOverrides): Promise<number>;

  assetHolders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "assetHolders(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  channelDisputeEpochs(overrides?: CallOverrides): Promise<number>;

  "channelDisputeEpochs()"(overrides?: CallOverrides): Promise<number>;

  claim(
    _allocationID: string,
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address,bool)"(
    _allocationID: string,
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimMany(
    _allocationID: string[],
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimMany(address[],bool)"(
    _allocationID: string[],
    _restake: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeAllocation(
    _allocationID: string,
    _poi: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeAllocation(address,bytes32)"(
    _allocationID: string,
    _poi: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeAllocationMany(
    _requests: { allocationID: string; poi: BytesLike }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeAllocationMany(tuple[])"(
    _requests: { allocationID: string; poi: BytesLike }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeAndAllocate(
    _closingAllocationID: string,
    _poi: BytesLike,
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
    _closingAllocationID: string,
    _poi: BytesLike,
    _indexer: string,
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collect(
    _tokens: BigNumberish,
    _allocationID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collect(uint256,address)"(
    _tokens: BigNumberish,
    _allocationID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  curationPercentage(overrides?: CallOverrides): Promise<number>;

  "curationPercentage()"(overrides?: CallOverrides): Promise<number>;

  delegate(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address,uint256)"(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegationParametersCooldown(overrides?: CallOverrides): Promise<number>;

  "delegationParametersCooldown()"(overrides?: CallOverrides): Promise<number>;

  delegationPools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    cooldownBlocks: number;
    indexingRewardCut: number;
    queryFeeCut: number;
    updatedAtBlock: BigNumber;
    tokens: BigNumber;
    shares: BigNumber;
    0: number;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "delegationPools(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    cooldownBlocks: number;
    indexingRewardCut: number;
    queryFeeCut: number;
    updatedAtBlock: BigNumber;
    tokens: BigNumber;
    shares: BigNumber;
    0: number;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  delegationRatio(overrides?: CallOverrides): Promise<number>;

  "delegationRatio()"(overrides?: CallOverrides): Promise<number>;

  delegationTaxPercentage(overrides?: CallOverrides): Promise<number>;

  "delegationTaxPercentage()"(overrides?: CallOverrides): Promise<number>;

  delegationUnbondingPeriod(overrides?: CallOverrides): Promise<number>;

  "delegationUnbondingPeriod()"(overrides?: CallOverrides): Promise<number>;

  getAllocation(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    subgraphDeploymentID: string;
    tokens: BigNumber;
    createdAtEpoch: BigNumber;
    closedAtEpoch: BigNumber;
    collectedFees: BigNumber;
    effectiveAllocation: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getAllocation(address)"(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    subgraphDeploymentID: string;
    tokens: BigNumber;
    createdAtEpoch: BigNumber;
    closedAtEpoch: BigNumber;
    collectedFees: BigNumber;
    effectiveAllocation: BigNumber;
    accRewardsPerAllocatedToken: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getAllocationState(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "getAllocationState(address)"(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getDelegation(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<{
    shares: BigNumber;
    tokensLocked: BigNumber;
    tokensLockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getDelegation(address,address)"(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<{
    shares: BigNumber;
    tokensLocked: BigNumber;
    tokensLockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getIndexerCapacity(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIndexerCapacity(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIndexerStakedTokens(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIndexerStakedTokens(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubgraphAllocatedTokens(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSubgraphAllocatedTokens(bytes32)"(
    _subgraphDeploymentID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdraweableDelegatedTokens(
    _delegation: {
      shares: BigNumberish;
      tokensLocked: BigNumberish;
      tokensLockedUntil: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWithdraweableDelegatedTokens(tuple)"(
    _delegation: {
      shares: BigNumberish;
      tokensLocked: BigNumberish;
      tokensLockedUntil: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasStake(_indexer: string, overrides?: CallOverrides): Promise<boolean>;

  "hasStake(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _controller: string,
    _minimumIndexerStake: BigNumberish,
    _thawingPeriod: BigNumberish,
    _protocolPercentage: BigNumberish,
    _curationPercentage: BigNumberish,
    _channelDisputeEpochs: BigNumberish,
    _maxAllocationEpochs: BigNumberish,
    _delegationUnbondingPeriod: BigNumberish,
    _delegationRatio: BigNumberish,
    _rebateAlphaNumerator: BigNumberish,
    _rebateAlphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32)"(
    _controller: string,
    _minimumIndexerStake: BigNumberish,
    _thawingPeriod: BigNumberish,
    _protocolPercentage: BigNumberish,
    _curationPercentage: BigNumberish,
    _channelDisputeEpochs: BigNumberish,
    _maxAllocationEpochs: BigNumberish,
    _delegationUnbondingPeriod: BigNumberish,
    _delegationRatio: BigNumberish,
    _rebateAlphaNumerator: BigNumberish,
    _rebateAlphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isAllocation(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllocation(address)"(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDelegator(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDelegator(address,address)"(
    _indexer: string,
    _delegator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperator(
    _operator: string,
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperator(address,address)"(
    _operator: string,
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxAllocationEpochs(overrides?: CallOverrides): Promise<number>;

  "maxAllocationEpochs()"(overrides?: CallOverrides): Promise<number>;

  minimumIndexerStake(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumIndexerStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  operatorAuth(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "operatorAuth(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  protocolPercentage(overrides?: CallOverrides): Promise<number>;

  "protocolPercentage()"(overrides?: CallOverrides): Promise<number>;

  rebates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fees: BigNumber;
    effectiveAllocatedStake: BigNumber;
    claimedRewards: BigNumber;
    unclaimedAllocationsCount: number;
    alphaNumerator: number;
    alphaDenominator: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
  }>;

  "rebates(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fees: BigNumber;
    effectiveAllocatedStake: BigNumber;
    claimedRewards: BigNumber;
    unclaimedAllocationsCount: number;
    alphaNumerator: number;
    alphaDenominator: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
  }>;

  setAssetHolder(
    _assetHolder: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAssetHolder(address,bool)"(
    _assetHolder: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setChannelDisputeEpochs(
    _channelDisputeEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setChannelDisputeEpochs(uint32)"(
    _channelDisputeEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCurationPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurationPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationParameters(
    _indexingRewardCut: BigNumberish,
    _queryFeeCut: BigNumberish,
    _cooldownBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationParameters(uint32,uint32,uint32)"(
    _indexingRewardCut: BigNumberish,
    _queryFeeCut: BigNumberish,
    _cooldownBlocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationParametersCooldown(
    _blocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationParametersCooldown(uint32)"(
    _blocks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationRatio(
    _delegationRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationRatio(uint32)"(
    _delegationRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationTaxPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationTaxPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelegationUnbondingPeriod(
    _delegationUnbondingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelegationUnbondingPeriod(uint32)"(
    _delegationUnbondingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxAllocationEpochs(
    _maxAllocationEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxAllocationEpochs(uint32)"(
    _maxAllocationEpochs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumIndexerStake(
    _minimumIndexerStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumIndexerStake(uint256)"(
    _minimumIndexerStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperator(address,bool)"(
    _operator: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProtocolPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProtocolPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRebateRatio(
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRebateRatio(uint32,uint32)"(
    _alphaNumerator: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSlasher(
    _slasher: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSlasher(address,bool)"(
    _slasher: string,
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setThawingPeriod(
    _thawingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setThawingPeriod(uint32)"(
    _thawingPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slash(
    _indexer: string,
    _tokens: BigNumberish,
    _reward: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "slash(address,uint256,uint256,address)"(
    _indexer: string,
    _tokens: BigNumberish,
    _reward: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slashers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "slashers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stake(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeTo(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeTo(address,uint256)"(
    _indexer: string,
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    tokensStaked: BigNumber;
    tokensAllocated: BigNumber;
    tokensLocked: BigNumber;
    tokensLockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "stakes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    tokensStaked: BigNumber;
    tokensAllocated: BigNumber;
    tokensLocked: BigNumber;
    tokensLockedUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  subgraphAllocations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "subgraphAllocations(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  thawingPeriod(overrides?: CallOverrides): Promise<number>;

  "thawingPeriod()"(overrides?: CallOverrides): Promise<number>;

  undelegate(
    _indexer: string,
    _shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "undelegate(address,uint256)"(
    _indexer: string,
    _shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstake(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstake(uint256)"(
    _tokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawDelegated(
    _indexer: string,
    _delegateToIndexer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawDelegated(address,address)"(
    _indexer: string,
    _delegateToIndexer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProxy(_proxy: string, overrides?: CallOverrides): Promise<void>;

    "acceptProxy(address)"(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptProxyAndCall(
      _proxy: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptProxyAndCall(address,bytes)"(
      _proxy: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    alphaDenominator(overrides?: CallOverrides): Promise<number>;

    "alphaDenominator()"(overrides?: CallOverrides): Promise<number>;

    alphaNumerator(overrides?: CallOverrides): Promise<number>;

    "alphaNumerator()"(overrides?: CallOverrides): Promise<number>;

    assetHolders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "assetHolders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    channelDisputeEpochs(overrides?: CallOverrides): Promise<number>;

    "channelDisputeEpochs()"(overrides?: CallOverrides): Promise<number>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeAndAllocate(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    curationPercentage(overrides?: CallOverrides): Promise<number>;

    "curationPercentage()"(overrides?: CallOverrides): Promise<number>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegationParametersCooldown(overrides?: CallOverrides): Promise<number>;

    "delegationParametersCooldown()"(
      overrides?: CallOverrides
    ): Promise<number>;

    delegationPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      cooldownBlocks: number;
      indexingRewardCut: number;
      queryFeeCut: number;
      updatedAtBlock: BigNumber;
      tokens: BigNumber;
      shares: BigNumber;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "delegationPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      cooldownBlocks: number;
      indexingRewardCut: number;
      queryFeeCut: number;
      updatedAtBlock: BigNumber;
      tokens: BigNumber;
      shares: BigNumber;
      0: number;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    delegationRatio(overrides?: CallOverrides): Promise<number>;

    "delegationRatio()"(overrides?: CallOverrides): Promise<number>;

    delegationTaxPercentage(overrides?: CallOverrides): Promise<number>;

    "delegationTaxPercentage()"(overrides?: CallOverrides): Promise<number>;

    delegationUnbondingPeriod(overrides?: CallOverrides): Promise<number>;

    "delegationUnbondingPeriod()"(overrides?: CallOverrides): Promise<number>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      subgraphDeploymentID: string;
      tokens: BigNumber;
      createdAtEpoch: BigNumber;
      closedAtEpoch: BigNumber;
      collectedFees: BigNumber;
      effectiveAllocation: BigNumber;
      accRewardsPerAllocatedToken: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<{
      shares: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdraweableDelegatedTokens(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdraweableDelegatedTokens(tuple)"(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStake(_indexer: string, overrides?: CallOverrides): Promise<boolean>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32)"(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxAllocationEpochs(overrides?: CallOverrides): Promise<number>;

    "maxAllocationEpochs()"(overrides?: CallOverrides): Promise<number>;

    minimumIndexerStake(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumIndexerStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAuth(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "operatorAuth(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    protocolPercentage(overrides?: CallOverrides): Promise<number>;

    "protocolPercentage()"(overrides?: CallOverrides): Promise<number>;

    rebates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    "rebates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fees: BigNumber;
      effectiveAllocatedStake: BigNumber;
      claimedRewards: BigNumber;
      unclaimedAllocationsCount: number;
      alphaNumerator: number;
      alphaDenominator: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
    }>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slashers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "slashers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stake(_tokens: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokensStaked: BigNumber;
      tokensAllocated: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokensStaked: BigNumber;
      tokensAllocated: BigNumber;
      tokensLocked: BigNumber;
      tokensLockedUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    subgraphAllocations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subgraphAllocations(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thawingPeriod(overrides?: CallOverrides): Promise<number>;

    "thawingPeriod()"(overrides?: CallOverrides): Promise<number>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(_tokens: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    withdrawDelegated(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AllocationClosed(
      indexer: string | null,
      subgraphDeploymentID: BytesLike | null,
      epoch: null,
      tokens: null,
      allocationID: string | null,
      effectiveAllocation: null,
      sender: null,
      poi: null,
      isDelegator: null
    ): EventFilter;

    AllocationCollected(
      indexer: string | null,
      subgraphDeploymentID: BytesLike | null,
      epoch: null,
      tokens: null,
      allocationID: string | null,
      from: null,
      curationFees: null,
      rebateFees: null
    ): EventFilter;

    AllocationCreated(
      indexer: string | null,
      subgraphDeploymentID: BytesLike | null,
      epoch: null,
      tokens: null,
      allocationID: string | null,
      metadata: null
    ): EventFilter;

    AssetHolderUpdate(
      caller: string | null,
      assetHolder: string | null,
      allowed: null
    ): EventFilter;

    DelegationParametersUpdated(
      indexer: string | null,
      indexingRewardCut: null,
      queryFeeCut: null,
      cooldownBlocks: null
    ): EventFilter;

    ParameterUpdated(param: null): EventFilter;

    RebateClaimed(
      indexer: string | null,
      subgraphDeploymentID: BytesLike | null,
      allocationID: string | null,
      epoch: null,
      forEpoch: null,
      tokens: null,
      unclaimedAllocationsCount: null,
      delegationFees: null
    ): EventFilter;

    SetController(controller: null): EventFilter;

    SetOperator(
      indexer: string | null,
      operator: string | null,
      allowed: null
    ): EventFilter;

    SlasherUpdate(
      caller: string | null,
      slasher: string | null,
      allowed: null
    ): EventFilter;

    StakeDelegated(
      indexer: string | null,
      delegator: string | null,
      tokens: null,
      shares: null
    ): EventFilter;

    StakeDelegatedLocked(
      indexer: string | null,
      delegator: string | null,
      tokens: null,
      shares: null,
      until: null
    ): EventFilter;

    StakeDelegatedWithdrawn(
      indexer: string | null,
      delegator: string | null,
      tokens: null
    ): EventFilter;

    StakeDeposited(indexer: string | null, tokens: null): EventFilter;

    StakeLocked(indexer: string | null, tokens: null, until: null): EventFilter;

    StakeSlashed(
      indexer: string | null,
      tokens: null,
      reward: null,
      beneficiary: null
    ): EventFilter;

    StakeWithdrawn(indexer: string | null, tokens: null): EventFilter;
  };

  estimateGas: {
    acceptProxy(_proxy: string, overrides?: Overrides): Promise<BigNumber>;

    "acceptProxy(address)"(
      _proxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    acceptProxyAndCall(
      _proxy: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptProxyAndCall(address,bytes)"(
      _proxy: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    alphaDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "alphaDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    alphaNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "alphaNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetHolders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "assetHolders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelDisputeEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "channelDisputeEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeAndAllocate(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    curationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "curationPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegationParametersCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    "delegationParametersCooldown()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegationPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegationPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "delegationRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegationTaxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "delegationTaxPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegationUnbondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "delegationUnbondingPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdraweableDelegatedTokens(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdraweableDelegatedTokens(tuple)"(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStake(_indexer: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32)"(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAllocationEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAllocationEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumIndexerStake(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumIndexerStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAuth(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "operatorAuth(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rebates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    slashers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "slashers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(_tokens: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subgraphAllocations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subgraphAllocations(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thawingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "thawingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstake(_tokens: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawDelegated(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProxy(
      _proxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptProxy(address)"(
      _proxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    acceptProxyAndCall(
      _proxy: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptProxyAndCall(address,bytes)"(
      _proxy: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocateFrom(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)"(
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alphaDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alphaDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alphaNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alphaNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetHolders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channelDisputeEpochs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "channelDisputeEpochs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address,bool)"(
      _allocationID: string,
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimMany(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimMany(address[],bool)"(
      _allocationID: string[],
      _restake: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeAllocation(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeAllocation(address,bytes32)"(
      _allocationID: string,
      _poi: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeAllocationMany(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeAllocationMany(tuple[])"(
      _requests: { allocationID: string; poi: BytesLike }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeAndAllocate(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)"(
      _closingAllocationID: string,
      _poi: BytesLike,
      _indexer: string,
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curationPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegationParametersCooldown(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegationParametersCooldown()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegationPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "delegationRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationTaxPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegationTaxPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationUnbondingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegationUnbondingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocationState(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllocationState(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegation(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegation(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexerCapacity(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndexerCapacity(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexerStakedTokens(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndexerStakedTokens(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubgraphAllocatedTokens(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubgraphAllocatedTokens(bytes32)"(
      _subgraphDeploymentID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdraweableDelegatedTokens(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWithdraweableDelegatedTokens(tuple)"(
      _delegation: {
        shares: BigNumberish;
        tokensLocked: BigNumberish;
        tokensLockedUntil: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasStake(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasStake(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32)"(
      _controller: string,
      _minimumIndexerStake: BigNumberish,
      _thawingPeriod: BigNumberish,
      _protocolPercentage: BigNumberish,
      _curationPercentage: BigNumberish,
      _channelDisputeEpochs: BigNumberish,
      _maxAllocationEpochs: BigNumberish,
      _delegationUnbondingPeriod: BigNumberish,
      _delegationRatio: BigNumberish,
      _rebateAlphaNumerator: BigNumberish,
      _rebateAlphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllocation(address)"(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDelegator(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDelegator(address,address)"(
      _indexer: string,
      _delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperator(address,address)"(
      _operator: string,
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAllocationEpochs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxAllocationEpochs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumIndexerStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumIndexerStake()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorAuth(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operatorAuth(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rebates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setChannelDisputeEpochs(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setChannelDisputeEpochs(uint32)"(
      _channelDisputeEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCurationPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurationPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationParameters(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationParameters(uint32,uint32,uint32)"(
      _indexingRewardCut: BigNumberish,
      _queryFeeCut: BigNumberish,
      _cooldownBlocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationParametersCooldown(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationParametersCooldown(uint32)"(
      _blocks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationRatio(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationRatio(uint32)"(
      _delegationRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationTaxPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationTaxPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelegationUnbondingPeriod(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelegationUnbondingPeriod(uint32)"(
      _delegationUnbondingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxAllocationEpochs(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxAllocationEpochs(uint32)"(
      _maxAllocationEpochs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumIndexerStake(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumIndexerStake(uint256)"(
      _minimumIndexerStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperator(address,bool)"(
      _operator: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProtocolPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProtocolPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRebateRatio(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRebateRatio(uint32,uint32)"(
      _alphaNumerator: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSlasher(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSlasher(address,bool)"(
      _slasher: string,
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setThawingPeriod(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setThawingPeriod(uint32)"(
      _thawingPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slash(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "slash(address,uint256,uint256,address)"(
      _indexer: string,
      _tokens: BigNumberish,
      _reward: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slashers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slashers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeTo(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeTo(address,uint256)"(
      _indexer: string,
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subgraphAllocations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subgraphAllocations(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thawingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "thawingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    undelegate(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "undelegate(address,uint256)"(
      _indexer: string,
      _shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstake(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstake(uint256)"(
      _tokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawDelegated(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawDelegated(address,address)"(
      _indexer: string,
      _delegateToIndexer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
