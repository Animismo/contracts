/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDisputeManagerInterface extends ethers.utils.Interface {
  functions: {
    "acceptDispute(bytes32)": FunctionFragment;
    "areConflictingAttestations(tuple,tuple)": FunctionFragment;
    "createIndexingDispute(address,uint256)": FunctionFragment;
    "createQueryDispute(bytes,uint256)": FunctionFragment;
    "createQueryDisputeConflict(bytes,bytes)": FunctionFragment;
    "drawDispute(bytes32)": FunctionFragment;
    "encodeHashReceipt(tuple)": FunctionFragment;
    "getAttestationIndexer(tuple)": FunctionFragment;
    "getTokensToReward(address)": FunctionFragment;
    "getTokensToSlash(address)": FunctionFragment;
    "isDisputeCreated(bytes32)": FunctionFragment;
    "rejectDispute(bytes32)": FunctionFragment;
    "setArbitrator(address)": FunctionFragment;
    "setFishermanRewardPercentage(uint32)": FunctionFragment;
    "setMinimumDeposit(uint256)": FunctionFragment;
    "setSlashingPercentage(uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "areConflictingAttestations",
    values: [
      {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIndexingDispute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createQueryDispute",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createQueryDisputeConflict",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeHashReceipt",
    values: [
      {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestationIndexer",
    values: [
      {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensToReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensToSlash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisputeCreated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFishermanRewardPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlashingPercentage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areConflictingAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIndexingDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createQueryDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createQueryDisputeConflict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeHashReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestationIndexer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensToReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensToSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisputeCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFishermanRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlashingPercentage",
    data: BytesLike
  ): Result;

  events: {};
}

export class IDisputeManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDisputeManagerInterface;

  functions: {
    acceptDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    areConflictingAttestations(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "areConflictingAttestations(tuple,tuple)"(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    createIndexingDispute(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createIndexingDispute(address,uint256)"(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createQueryDispute(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createQueryDispute(bytes,uint256)"(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createQueryDisputeConflict(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createQueryDisputeConflict(bytes,bytes)"(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    drawDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "drawDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    encodeHashReceipt(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "encodeHashReceipt(tuple)"(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getAttestationIndexer(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAttestationIndexer(tuple)"(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getTokensToReward(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTokensToReward(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTokensToSlash(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTokensToSlash(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isDisputeCreated(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isDisputeCreated(bytes32)"(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    rejectDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rejectDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setArbitrator(
      _arbitrator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setArbitrator(address)"(
      _arbitrator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFishermanRewardPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFishermanRewardPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumDeposit(
      _minimumDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumDeposit(uint256)"(
      _minimumDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSlashingPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSlashingPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptDispute(
    _disputeID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptDispute(bytes32)"(
    _disputeID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  areConflictingAttestations(
    _attestation1: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    },
    _attestation2: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "areConflictingAttestations(tuple,tuple)"(
    _attestation1: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    },
    _attestation2: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  createIndexingDispute(
    _allocationID: string,
    _deposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createIndexingDispute(address,uint256)"(
    _allocationID: string,
    _deposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createQueryDispute(
    _attestationData: BytesLike,
    _deposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createQueryDispute(bytes,uint256)"(
    _attestationData: BytesLike,
    _deposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createQueryDisputeConflict(
    _attestationData1: BytesLike,
    _attestationData2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createQueryDisputeConflict(bytes,bytes)"(
    _attestationData1: BytesLike,
    _attestationData2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  drawDispute(
    _disputeID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "drawDispute(bytes32)"(
    _disputeID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  encodeHashReceipt(
    _receipt: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeHashReceipt(tuple)"(
    _receipt: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getAttestationIndexer(
    _attestation: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "getAttestationIndexer(tuple)"(
    _attestation: {
      requestCID: BytesLike;
      responseCID: BytesLike;
      subgraphDeploymentID: BytesLike;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getTokensToReward(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokensToReward(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensToSlash(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokensToSlash(address)"(
    _indexer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isDisputeCreated(
    _disputeID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDisputeCreated(bytes32)"(
    _disputeID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rejectDispute(
    _disputeID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rejectDispute(bytes32)"(
    _disputeID: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setArbitrator(
    _arbitrator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setArbitrator(address)"(
    _arbitrator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFishermanRewardPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFishermanRewardPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumDeposit(
    _minimumDeposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumDeposit(uint256)"(
    _minimumDeposit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSlashingPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSlashingPercentage(uint32)"(
    _percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptDispute(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    areConflictingAttestations(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "areConflictingAttestations(tuple,tuple)"(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    createIndexingDispute(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createIndexingDispute(address,uint256)"(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createQueryDispute(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createQueryDispute(bytes,uint256)"(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createQueryDisputeConflict(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "createQueryDisputeConflict(bytes,bytes)"(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    drawDispute(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "drawDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    encodeHashReceipt(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeHashReceipt(tuple)"(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getAttestationIndexer(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "getAttestationIndexer(tuple)"(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getTokensToReward(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokensToReward(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensToSlash(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokensToSlash(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputeCreated(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDisputeCreated(bytes32)"(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rejectDispute(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrator(
      _arbitrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setArbitrator(address)"(
      _arbitrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFishermanRewardPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFishermanRewardPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumDeposit(
      _minimumDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumDeposit(uint256)"(
      _minimumDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlashingPercentage(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSlashingPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    areConflictingAttestations(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "areConflictingAttestations(tuple,tuple)"(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createIndexingDispute(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createIndexingDispute(address,uint256)"(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createQueryDispute(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createQueryDispute(bytes,uint256)"(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createQueryDisputeConflict(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createQueryDisputeConflict(bytes,bytes)"(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    drawDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "drawDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    encodeHashReceipt(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeHashReceipt(tuple)"(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttestationIndexer(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttestationIndexer(tuple)"(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensToReward(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokensToReward(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensToSlash(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokensToSlash(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputeCreated(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDisputeCreated(bytes32)"(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rejectDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setArbitrator(
      _arbitrator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setArbitrator(address)"(
      _arbitrator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFishermanRewardPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFishermanRewardPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumDeposit(
      _minimumDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumDeposit(uint256)"(
      _minimumDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSlashingPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSlashingPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    areConflictingAttestations(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "areConflictingAttestations(tuple,tuple)"(
      _attestation1: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      _attestation2: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createIndexingDispute(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createIndexingDispute(address,uint256)"(
      _allocationID: string,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createQueryDispute(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createQueryDispute(bytes,uint256)"(
      _attestationData: BytesLike,
      _deposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createQueryDisputeConflict(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createQueryDisputeConflict(bytes,bytes)"(
      _attestationData1: BytesLike,
      _attestationData2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    drawDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "drawDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    encodeHashReceipt(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeHashReceipt(tuple)"(
      _receipt: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttestationIndexer(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAttestationIndexer(tuple)"(
      _attestation: {
        requestCID: BytesLike;
        responseCID: BytesLike;
        subgraphDeploymentID: BytesLike;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensToReward(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokensToReward(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensToSlash(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokensToSlash(address)"(
      _indexer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisputeCreated(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDisputeCreated(bytes32)"(
      _disputeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectDispute(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rejectDispute(bytes32)"(
      _disputeID: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setArbitrator(
      _arbitrator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setArbitrator(address)"(
      _arbitrator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFishermanRewardPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFishermanRewardPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumDeposit(
      _minimumDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumDeposit(uint256)"(
      _minimumDeposit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSlashingPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSlashingPercentage(uint32)"(
      _percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
