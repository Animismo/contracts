/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PausableInterface extends ethers.utils.Interface {
  functions: {
    "lastPausePartialTime()": FunctionFragment;
    "lastPauseTime()": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lastPausePartialTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPauseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "lastPausePartialTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPauseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;

  events: {
    "NewPauseGuardian(address,address)": EventFragment;
    "PartialPauseChanged(bool)": EventFragment;
    "PauseChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPauseGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialPauseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseChanged"): EventFragment;
}

export class Pausable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PausableInterface;

  functions: {
    lastPausePartialTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastPausePartialTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastPauseTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastPauseTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pauseGuardian(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pauseGuardian()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  lastPausePartialTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastPausePartialTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastPauseTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  "pauseGuardian()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    lastPausePartialTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPausePartialTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPauseTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    "pauseGuardian()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewPauseGuardian(
      oldPauseGuardian: string | null,
      pauseGuardian: string | null
    ): EventFilter;

    PartialPauseChanged(isPaused: null): EventFilter;

    PauseChanged(isPaused: null): EventFilter;
  };

  estimateGas: {
    lastPausePartialTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPausePartialTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPauseTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    "pauseGuardian()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lastPausePartialTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPausePartialTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastPauseTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pauseGuardian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
