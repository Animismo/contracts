/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DisputeManagerV1StorageInterface extends ethers.utils.Interface {
  functions: {
    "addressCache(bytes32)": FunctionFragment;
    "arbitrator()": FunctionFragment;
    "controller()": FunctionFragment;
    "disputes(bytes32)": FunctionFragment;
    "fishermanRewardPercentage()": FunctionFragment;
    "minimumDeposit()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "slashingPercentage()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressCache",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "disputes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "fishermanRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashingPercentage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addressCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fishermanRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingPercentage",
    data: BytesLike
  ): Result;

  events: {
    "ParameterUpdated(string)": EventFragment;
    "SetController(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
}

export class DisputeManagerV1Storage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DisputeManagerV1StorageInterface;

  functions: {
    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    arbitrator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "arbitrator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    controller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "controller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    disputes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      fisherman: string;
      deposit: BigNumber;
      relatedDisputeID: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    "disputes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      fisherman: string;
      deposit: BigNumber;
      relatedDisputeID: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    fishermanRewardPercentage(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "fishermanRewardPercentage()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    minimumDeposit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minimumDeposit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slashingPercentage(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "slashingPercentage()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;
  };

  addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addressCache(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  arbitrator(overrides?: CallOverrides): Promise<string>;

  "arbitrator()"(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  disputes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    fisherman: string;
    deposit: BigNumber;
    relatedDisputeID: string;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
  }>;

  "disputes(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    indexer: string;
    fisherman: string;
    deposit: BigNumber;
    relatedDisputeID: string;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
  }>;

  fishermanRewardPercentage(overrides?: CallOverrides): Promise<number>;

  "fishermanRewardPercentage()"(overrides?: CallOverrides): Promise<number>;

  minimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  setController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slashingPercentage(overrides?: CallOverrides): Promise<number>;

  "slashingPercentage()"(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    addressCache(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    arbitrator(overrides?: CallOverrides): Promise<string>;

    "arbitrator()"(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    disputes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      fisherman: string;
      deposit: BigNumber;
      relatedDisputeID: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    "disputes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      indexer: string;
      fisherman: string;
      deposit: BigNumber;
      relatedDisputeID: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    fishermanRewardPercentage(overrides?: CallOverrides): Promise<number>;

    "fishermanRewardPercentage()"(overrides?: CallOverrides): Promise<number>;

    minimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slashingPercentage(overrides?: CallOverrides): Promise<number>;

    "slashingPercentage()"(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    ParameterUpdated(param: null): EventFilter;

    SetController(controller: null): EventFilter;
  };

  estimateGas: {
    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitrator(overrides?: CallOverrides): Promise<BigNumber>;

    "arbitrator()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "disputes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fishermanRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "fishermanRewardPercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    slashingPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "slashingPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressCache(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressCache(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "arbitrator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "disputes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fishermanRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fishermanRewardPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slashingPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slashingPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
