/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IensInterface extends ethers.utils.Interface {
  functions: {
    "owner(bytes32)": FunctionFragment;
    "setSubnodeRecord(bytes32,bytes32,address,address,uint64)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setSubnodeRecord",
    values: [BytesLike, BytesLike, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeRecord",
    data: BytesLike
  ): Result;

  events: {};
}

export class Iens extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IensInterface;

  functions: {
    owner(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setSubnodeRecord(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSubnodeRecord(bytes32,bytes32,address,address,uint64)"(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  owner(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  "owner(bytes32)"(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  setSubnodeRecord(
    node: BytesLike,
    label: BytesLike,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSubnodeRecord(bytes32,bytes32,address,address,uint64)"(
    node: BytesLike,
    label: BytesLike,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    "owner(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setSubnodeRecord(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSubnodeRecord(bytes32,bytes32,address,address,uint64)"(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    owner(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "owner(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSubnodeRecord(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSubnodeRecord(bytes32,bytes32,address,address,uint64)"(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "owner(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSubnodeRecord(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSubnodeRecord(bytes32,bytes32,address,address,uint64)"(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
