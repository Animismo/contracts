/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { RewardsManagerMock } from "./RewardsManagerMock";

export class RewardsManagerMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<RewardsManagerMock> {
    return super.deploy(overrides || {}) as Promise<RewardsManagerMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RewardsManagerMock {
    return super.attach(address) as RewardsManagerMock;
  }
  connect(signer: Signer): RewardsManagerMockFactory {
    return super.connect(signer) as RewardsManagerMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewardsManagerMock {
    return new Contract(address, _abi, signerOrProvider) as RewardsManagerMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "n",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "base",
        type: "uint256"
      }
    ],
    name: "pow",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610181806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314732b7114610030575b600080fd5b61004361003e366004610117565b610059565b6040516100509190610142565b60405180910390f35b60008380156100f95760018416801561007457859250610078565b8392505b50600283046002850494505b84156100f357858602868782041461009b57600080fd5b818101818110156100ab57600080fd5b85900496505060018516156100e85785830283878204141587151516156100d157600080fd5b818101818110156100e157600080fd5b8590049350505b600285049450610084565b5061010f565b838015610109576000925061010d565b8392505b505b509392505050565b60008060006060848603121561012b578283fd5b505081359360208301359350604090920135919050565b9081526020019056fea2646970667358221220a724226a1e9cc4517fc1f562b901a49183c2c3daf1eb5893e494825ebf7b1e5364736f6c63430007040033";
