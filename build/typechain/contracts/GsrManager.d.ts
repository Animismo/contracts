/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GsrManagerInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "balances(address)": FunctionFragment;
    "calcReturn(address)": FunctionFragment;
    "calcUpdatedRate()": FunctionFragment;
    "cumulativeInterestRate()": FunctionFragment;
    "drip()": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "join(uint256)": FunctionFragment;
    "lastDripTime()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "reserves()": FunctionFragment;
    "savingsRate()": FunctionFragment;
    "setRate(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "calcReturn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcUpdatedRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "drip", values?: undefined): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lastDripTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserves", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "savingsRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcReturn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcUpdatedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDripTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "savingsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Drip(uint256,uint256)": EventFragment;
    "Exit(address,uint256,uint256)": EventFragment;
    "Join(address,uint256,uint256)": EventFragment;
    "NewOwnership(address,address)": EventFragment;
    "NewPendingOwnership(address,address)": EventFragment;
    "SetRate(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Drip"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRate"): EventFragment;
}

export class GsrManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GsrManagerInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calcReturn(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      totalBalance: BigNumber;
      0: BigNumber;
    }>;

    "calcReturn(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      totalBalance: BigNumber;
      0: BigNumber;
    }>;

    calcUpdatedRate(
      overrides?: CallOverrides
    ): Promise<{
      updatedRate: BigNumber;
      0: BigNumber;
    }>;

    "calcUpdatedRate()"(
      overrides?: CallOverrides
    ): Promise<{
      updatedRate: BigNumber;
      0: BigNumber;
    }>;

    cumulativeInterestRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "cumulativeInterestRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    drip(overrides?: Overrides): Promise<ContractTransaction>;

    "drip()"(overrides?: Overrides): Promise<ContractTransaction>;

    exit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    join(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "join(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastDripTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastDripTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pendingGovernor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pendingGovernor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reserves(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "reserves()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    savingsRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "savingsRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setRate(
      _newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRate(uint256)"(
      _newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      _newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcReturn(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "calcReturn(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcUpdatedRate(overrides?: CallOverrides): Promise<BigNumber>;

  "calcUpdatedRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  "cumulativeInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  drip(overrides?: Overrides): Promise<ContractTransaction>;

  "drip()"(overrides?: Overrides): Promise<ContractTransaction>;

  exit(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  join(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "join(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastDripTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastDripTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  "pendingGovernor()"(overrides?: CallOverrides): Promise<string>;

  reserves(overrides?: CallOverrides): Promise<BigNumber>;

  "reserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  savingsRate(overrides?: CallOverrides): Promise<BigNumber>;

  "savingsRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  setRate(
    _newRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRate(uint256)"(
    _newRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcReturn(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "calcReturn(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpdatedRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calcUpdatedRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    drip(overrides?: CallOverrides): Promise<BigNumber>;

    "drip()"(overrides?: CallOverrides): Promise<BigNumber>;

    exit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    join(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "join(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastDripTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastDripTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    "pendingGovernor()"(overrides?: CallOverrides): Promise<string>;

    reserves(overrides?: CallOverrides): Promise<BigNumber>;

    "reserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    savingsRate(overrides?: CallOverrides): Promise<BigNumber>;

    "savingsRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRate(_newRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setRate(uint256)"(
      _newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Drip(cumulativeInterestRate: null, lastDripTime: null): EventFilter;

    Exit(account: string | null, gsrBalance: null, gdai: null): EventFilter;

    Join(account: string | null, gdai: null, gsrBalance: null): EventFilter;

    NewOwnership(from: string | null, to: string | null): EventFilter;

    NewPendingOwnership(from: string | null, to: string | null): EventFilter;

    SetRate(newRate: null): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcReturn(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "calcReturn(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpdatedRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calcUpdatedRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeInterestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    drip(overrides?: Overrides): Promise<BigNumber>;

    "drip()"(overrides?: Overrides): Promise<BigNumber>;

    exit(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    join(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "join(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastDripTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastDripTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserves(overrides?: CallOverrides): Promise<BigNumber>;

    "reserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    savingsRate(overrides?: CallOverrides): Promise<BigNumber>;

    "savingsRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRate(_newRate: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setRate(uint256)"(
      _newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcReturn(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcReturn(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUpdatedRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calcUpdatedRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeInterestRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cumulativeInterestRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drip(overrides?: Overrides): Promise<PopulatedTransaction>;

    "drip()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    exit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "join(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastDripTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastDripTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingGovernor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savingsRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "savingsRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRate(
      _newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRate(uint256)"(
      _newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
